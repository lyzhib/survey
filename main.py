import logging
import asyncio
import aiosqlite
import aiohttp
from datetime import datetime

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = '7040636616:AAEQPcJRa7hEVDAVdFm8onRa0s4IfPiKPHo'
ADMIN_ID = 5188394092  # ‚Üê –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
SHEET_NAME = "–í–æ–ø—Ä–æ—Å—ã –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
OPENROUTER_API_KEY = "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"  # ‚Üê –£–∫–∞–∂–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–ª—é—á OpenRouter

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO)

# === GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gs_client = gspread.authorize(creds)
sheet = gs_client.open(SHEET_NAME).sheet1

# === –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´ ===
faq = {
    "–ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞": "–ü–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø–∏—Å–∞–Ω—ã —Ü–µ–ª–∏, –∑–∞–¥–∞—á–∏, —Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.",
    "—Å—Ä–æ–∫–∏": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ –≤—É–∑–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞.",
    "—Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞": "–¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ. –û–ø–∏—à–∏—Ç–µ –µ—ë –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
}

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
async def init_db():
    async with aiosqlite.connect("questions.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS questions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                question TEXT,
                answer TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.commit()

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î ===
async def save_to_db(user_id, username, question, answer):
    async with aiosqlite.connect("questions.db") as db:
        await db.execute("""
            INSERT INTO questions (user_id, username, question, answer)
            VALUES (?, ?, ?, ?)
        """, (user_id, username, question, answer))
        await db.commit()

# === –≠–ö–°–ü–û–†–¢ –í GOOGLE SHEETS ===
async def export_to_gsheet(user_id, username, question, answer):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    row = [timestamp, user_id, username or "", question, answer or ""]
    sheet.append_row(row)

# === –ó–ê–ü–†–û–° –ö DEEPSEEK –ß–ï–†–ï–ó OPENROUTER ===
async def get_deepseek_response(question: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "Referer": "https://chat.openai.com"  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω
    }
    data = {
        "model": "deepseek/deepseek-chat-v3-0324:free",  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ID
        "messages": [
            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤."},
            {"role": "user", "content": question}
        ]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as resp:
            if resp.status != 200:
                text = await resp.text()
                logging.error(f"[OpenRouter Error {resp.status}] {text}")
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            result = await resp.json()
            return result["choices"][0]["message"]["content"].strip()

# === /start ===
@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ü–†–û–°–û–í ===
@router.message(F.text)
async def handle_question(message: Message):
    user_question = message.text
    user_id = message.from_user.id
    username = message.from_user.username or ""

    for keyword in faq:
        if keyword in user_question.lower():
            answer = faq[keyword]
            await save_to_db(user_id, username, user_question, answer)
            await export_to_gsheet(user_id, username, user_question, answer)
            await message.reply(answer)
            return

    answer = await get_deepseek_response(user_question)

    await save_to_db(user_id, username, user_question, answer)
    await export_to_gsheet(user_id, username, user_question, answer)
    await message.reply(answer)

    await bot.send_message(
        ADMIN_ID,
        f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{username or '–±–µ–∑_–Ω–∏–∫–∞'}:\n{user_question}\n\nü§ñ –û—Ç–≤–µ—Ç: {answer}"
    )

# === –ó–ê–ü–£–°–ö ===
async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
